package EntityInstanceDemo.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;

public class EntityInstance_Constraints extends BaseConstraintsDescriptor {
  public EntityInstance_Constraints() {
    super("EntityInstanceDemo.structure.EntityInstance");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("entity", new BaseReferenceConstraintsDescriptor("entity", this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }

      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode, final IScope scope) {
        return true;
      }

      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode, final IScope scope) {
        SPropertyOperations.set(referenceNode, "name", "a" + SPropertyOperations.getString(newReferentNode, "name"));
        ListSequence.fromList(SLinkOperations.getTargets(referenceNode, "attributeValues", true)).clear();

        for (SNode attr : ListSequence.fromList(SLinkOperations.getTargets(newReferentNode, "attributes", true))) {
          SNode attributeValue = SConceptOperations.createNewNode("EntityInstanceDemo.structure.EntityAttributeValue", null);
          SLinkOperations.setTarget(attributeValue, "attribute", attr, false);
          ListSequence.fromList(SLinkOperations.getTargets(referenceNode, "attributeValues", true)).addElement(attributeValue);
        }
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider();
      }
    });
    return references;
  }
}
